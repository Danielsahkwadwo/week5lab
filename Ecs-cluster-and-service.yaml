AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster and Services for containerized web application'

Parameters:
  EnvironmentName:
    Description: Environment name that will be prefixed to resource names
    Type: String
    Default: dev

  ContainerImage:
    Description: URI of the container image in ECR
    Type: String
    Default: {{account-id}}.dkr.ecr.{{region}}.amazonaws.com/image-gallery:latest

  ContainerCpu:
    Description: CPU units for the container (1024 = 1 vCPU)
    Type: Number
    Default: 512

  ContainerMemory:
    Description: Memory in MiB for the container
    Type: Number
    Default: 1024

  DesiredCount:
    Description: Desired count of tasks
    Type: Number
    Default: 2

  MaxCapacity:
    Description: Maximum capacity for auto scaling
    Type: Number
    Default: 4

  MinCapacity:
    Description: Minimum capacity for auto scaling
    Type: Number
    Default: 2

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Cluster

  # Log Group for Container Logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-app
      RetentionInDays: 14

  # Task Definition - Blue Environment
  TaskDefinitionBlue:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-app-blue
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}-ECS-TASK-EXECUTION-ROLE-ARN
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}-ECS-TASK-ROLE-ARN
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-app
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: S3_BUCKET_NAME
              Value:
                Fn::ImportValue: !Sub ${EnvironmentName}-IMAGES-BUCKET-NAME
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Task-Definition-Blue

  # Task Definition - Green Environment
  TaskDefinitionGreen:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-app-green
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}-ECS-TASK-EXECUTION-ROLE-ARN
      TaskRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}-ECS-TASK-ROLE-ARN
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-app
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: S3_BUCKET_NAME
              Value:
                Fn::ImportValue: !Sub ${EnvironmentName}-IMAGES-BUCKET-NAME
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Task-Definition-Green

  # ECS Service - Blue Environment
  ServiceBlue:
    Type: AWS::ECS::Service
    DependsOn: TaskDefinitionBlue
    Properties:
      ServiceName: !Sub ${EnvironmentName}-service-blue
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionBlue
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ECS-SG-ID
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PRIVATE-SUBNET-AZ1-ID
            - Fn::ImportValue: !Sub ${EnvironmentName}-PRIVATE-SUBNET-AZ2-ID
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-app
          ContainerPort: 3000
          TargetGroupArn:
            Fn::ImportValue: !Sub ${EnvironmentName}-TG-BLUE-ARN
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Service-Blue

  # Auto Scaling for ECS Service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      ResourceId: !Sub service/${ECSCluster}/${ServiceBlue.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  # CPU Based Scaling Policy
  CpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # Memory Based Scaling Policy
  MemoryScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-memory-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

Outputs:
  ECSCluster:
    Description: The created ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}-ECS-CLUSTER

  TaskDefinitionBlue:
    Description: ARN of the Blue Task Definition
    Value: !Ref TaskDefinitionBlue
    Export:
      Name: !Sub ${EnvironmentName}-TASK-DEFINITION-BLUE

  TaskDefinitionGreen:
    Description: ARN of the Green Task Definition
    Value: !Ref TaskDefinitionGreen
    Export:
      Name: !Sub ${EnvironmentName}-TASK-DEFINITION-GREEN

  ServiceBlue:
    Description: Name of the Blue Service
    Value: !GetAtt ServiceBlue.Name
    Export:
      Name: !Sub ${EnvironmentName}-SERVICE-BLUE